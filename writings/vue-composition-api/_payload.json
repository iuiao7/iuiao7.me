[{"data":1,"prerenderedAt":231},["ShallowReactive",2],{"content-query-zxkcZIdG9J":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"title":8,"description":9,"published":10,"tags":11,"body":16,"_type":225,"_id":226,"_source":227,"_file":228,"_stem":229,"_extension":230},"/writings/vue-composition-api","writings",false,"","深入理解Vue 3 Composition API","探索Vue 3 Composition API的强大功能和使用方法","2024/03/18",[12,13,14,15],"Vue","JavaScript","前端开发","Composition API",{"type":17,"children":18,"toc":208},"root",[19,27,33,40,45,51,56,62,81,87,99,105,126,130,140,151,155,165,174,179,184,189,198,203],{"type":20,"tag":21,"props":22,"children":24},"element","h1",{"id":23},"深入理解vue-3-composition-api",[25],{"type":26,"value":8},"text",{"type":20,"tag":28,"props":29,"children":30},"p",{},[31],{"type":26,"value":32},"Vue 3的发布带来了许多激动人心的新特性,其中最引人注目的莫过于Composition API。这个新的API为我们提供了一种更灵活、更强大的方式来组织和重用组件逻辑。本文将深入探讨Composition API的核心概念、使用方法以及它如何改变我们的Vue开发体验。",{"type":20,"tag":34,"props":35,"children":37},"h2",{"id":36},"什么是composition-api",[38],{"type":26,"value":39},"什么是Composition API?",{"type":20,"tag":28,"props":41,"children":42},{},[43],{"type":26,"value":44},"Composition API是Vue 3引入的一个新的API集合,旨在解决Vue 2中Options API的一些限制。它允许我们使用导入的API函数来描述组件逻辑,而不是依赖于预定义的组件选项。这种方法提供了更好的代码组织、逻辑重用和类型推断。",{"type":20,"tag":34,"props":46,"children":48},{"id":47},"为什么需要composition-api",[49],{"type":26,"value":50},"为什么需要Composition API?",{"type":20,"tag":28,"props":52,"children":53},{},[54],{"type":26,"value":55},"在大型复杂的应用中,Options API可能会导致组件变得难以理解和维护。相关的逻辑可能分散在不同的选项中,使得代码难以追踪和重构。Composition API通过允许我们按照逻辑关系组织代码,解决了这个问题。",{"type":20,"tag":34,"props":57,"children":59},{"id":58},"setup函数composition-api的入口",[60],{"type":26,"value":61},"setup函数:Composition API的入口",{"type":20,"tag":28,"props":63,"children":64},{},[65,72,74,79],{"type":20,"tag":66,"props":67,"children":69},"code",{"className":68},[],[70],{"type":26,"value":71},"setup",{"type":26,"value":73},"函数是Composition API的核心。它在组件创建之前执行,作为组合逻辑的入口点。在",{"type":20,"tag":66,"props":75,"children":77},{"className":76},[],[78],{"type":26,"value":71},{"type":26,"value":80},"中,我们可以定义响应式状态、计算属性、方法等,并将它们返回以供模板使用。",{"type":20,"tag":82,"props":83,"children":85},"h3",{"id":84},"setup函数的基本结构",[86],{"type":26,"value":84},{"type":20,"tag":88,"props":89,"children":94},"pre",{"className":90,"code":92,"language":93,"meta":7},[91],"language-vue","\u003Ctemplate>\n  \u003Cdiv>\n    \u003Cp>Count: {{ count }}\u003C/p>\n    \u003Cp>Double Count: {{ doubleCount }}\u003C/p>\n    \u003Cbutton @click=\"increment\">\n      Increment\n    \u003C/button>\n  \u003C/div>\n\u003C/template>\n\n\u003Cscript setup>\nimport { computed, onMounted, ref } from 'vue'\n// 响应式状态\nconst count = ref(0)\n// 计算属性\nconst doubleCount = computed(() => count.value, 2)\n// 方法\nconst increment = () => {\n  count.value++\n}\n// 生命周期钩子\nonMounted(() => {\n  console.log('组件已挂载')\n})\n\u003C/script>\n","vue",[95],{"type":20,"tag":66,"props":96,"children":97},{"__ignoreMap":7},[98],{"type":26,"value":92},{"type":20,"tag":34,"props":100,"children":102},{"id":101},"响应式系统的核心ref和reactive",[103],{"type":26,"value":104},"响应式系统的核心:ref和reactive",{"type":20,"tag":28,"props":106,"children":107},{},[108,110,116,118,124],{"type":26,"value":109},"Composition API引入了两个主要的响应式API:",{"type":20,"tag":66,"props":111,"children":113},{"className":112},[],[114],{"type":26,"value":115},"ref",{"type":26,"value":117},"和",{"type":20,"tag":66,"props":119,"children":121},{"className":120},[],[122],{"type":26,"value":123},"reactive",{"type":26,"value":125},"。",{"type":20,"tag":82,"props":127,"children":128},{"id":115},[129],{"type":26,"value":115},{"type":20,"tag":28,"props":131,"children":132},{},[133,138],{"type":20,"tag":66,"props":134,"children":136},{"className":135},[],[137],{"type":26,"value":115},{"type":26,"value":139},"用于创建一个响应式的引用,可以包含任何类型的值",{"type":20,"tag":88,"props":141,"children":146},{"className":142,"code":144,"language":145,"meta":7},[143],"language-javascript","import { ref } from 'vue'\nconst count = ref(0)\nconsole.log(count.value) // 0\ncount.value++\nconsole.log(count.value) // 1\n","javascript",[147],{"type":20,"tag":66,"props":148,"children":149},{"__ignoreMap":7},[150],{"type":26,"value":144},{"type":20,"tag":82,"props":152,"children":153},{"id":123},[154],{"type":26,"value":123},{"type":20,"tag":28,"props":156,"children":157},{},[158,163],{"type":20,"tag":66,"props":159,"children":161},{"className":160},[],[162],{"type":26,"value":123},{"type":26,"value":164},"用于创建一个响应式对象,可以包含多个属性",{"type":20,"tag":88,"props":166,"children":169},{"className":167,"code":168,"language":145,"meta":7},[143],"import { reactive } from 'vue'\nconst state = reactive({ count: 0 })\nconsole.log(state.count) // 0\nstate.count++\n",[170],{"type":20,"tag":66,"props":171,"children":172},{"__ignoreMap":7},[173],{"type":26,"value":168},{"type":20,"tag":34,"props":175,"children":177},{"id":176},"计算属性和监听器",[178],{"type":26,"value":176},{"type":20,"tag":82,"props":180,"children":182},{"id":181},"计算属性",[183],{"type":26,"value":181},{"type":20,"tag":28,"props":185,"children":186},{},[187],{"type":26,"value":188},"计算属性是根据其他响应式状态计算得出的值。它们在模板中使用,但不会在响应式数据流中引入新的响应式状态。",{"type":20,"tag":88,"props":190,"children":193},{"className":191,"code":192,"language":145,"meta":7},[143],"import { computed, ref } from 'vue'\nconst count = ref(0)\nconst doubleCount = computed(() => count.value, 2)\nconsole.log(doubleCount.value) // 0\ncount.value++\nconsole.log(doubleCount.value) // 2\n",[194],{"type":20,"tag":66,"props":195,"children":196},{"__ignoreMap":7},[197],{"type":26,"value":192},{"type":20,"tag":82,"props":199,"children":201},{"id":200},"监听器",[202],{"type":26,"value":200},{"type":20,"tag":28,"props":204,"children":205},{},[206],{"type":26,"value":207},"监听器用于监听响应式状态的变化,并在变化时执行某些操作。",{"title":7,"searchDepth":209,"depth":209,"links":210},2,[211,212,213,217,221],{"id":36,"depth":209,"text":39},{"id":47,"depth":209,"text":50},{"id":58,"depth":209,"text":61,"children":214},[215],{"id":84,"depth":216,"text":84},3,{"id":101,"depth":209,"text":104,"children":218},[219,220],{"id":115,"depth":216,"text":115},{"id":123,"depth":216,"text":123},{"id":176,"depth":209,"text":176,"children":222},[223,224],{"id":181,"depth":216,"text":181},{"id":200,"depth":216,"text":200},"markdown","content:1.writings:vue-composition-api.md","content","1.writings/vue-composition-api.md","1.writings/vue-composition-api","md",1727401987732]