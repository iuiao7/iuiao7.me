{"generatedAt":1727408088121,"generateTime":172,"contents":[{"_path":"/writings/building-your-first-api-with-expressjs-a-beginners-guide","_dir":"writings","_draft":false,"_partial":false,"_locale":"","title":"Building Your First API with Express.js: A Beginner's Guide","description":"A beginner-friendly guide to building your first API with Express.js","published":"2023/11/2","body":{"type":"root","children":[{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This article was created using ChatGPT and meant as a placeholder"}]}]},{"type":"element","tag":"h2","props":{"id":"what-is-expressjs"},"children":[{"type":"text","value":"What is Express.js?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications. It facilitates the rapid development of Node-based web applications and is widely used to build APIs due to its simplicity and performance."}]},{"type":"element","tag":"h2","props":{"id":"step-1-setting-up-your-environment"},"children":[{"type":"text","value":"Step 1: Setting Up Your Environment"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Before you start, ensure that you have Node.js installed on your system. You can download it from Node.js official website."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Once Node.js is installed, you can initiate your project:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"mkdir my-express-api\ncd my-express-api\nnpm init -y\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"mkdir my-express-api\ncd my-express-api\nnpm init -y\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This creates a new directory for your project and initializes a new Node.js project."}]},{"type":"element","tag":"h2","props":{"id":"step-2-installing-expressjs"},"children":[{"type":"text","value":"Step 2: Installing Express.js"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Install Express.js using npm (Node Package Manager):"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"Copy code\nnpm install express --save\nThis command installs Express.js and adds it to your project's dependencies.\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Copy code\nnpm install express --save\nThis command installs Express.js and adds it to your project's dependencies.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"step-3-creating-your-first-express-server"},"children":[{"type":"text","value":"Step 3: Creating Your First Express Server"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a file named app.js in your project directory. This file will be the entry point of your API. Add the following code to app.js:"}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/', (req, res) => {\n  res.send('Hello World!')\n})\n\napp.listen(port, () => {\n  console.log(`Example app listening at http://localhost:${port}`)\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This code creates a basic Express server that listens on port 3000 and responds with \"Hello World!\" to HTTP GET requests to the root URL (/)."}]},{"type":"element","tag":"h2","props":{"id":"step-4-running-your-express-server"},"children":[{"type":"text","value":"Step 4: Running Your Express Server"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Run your server using Node.js:"}]},{"type":"element","tag":"pre","props":{"className":["language-bash"],"code":"Copy code\nnode app.js\nVisit http://localhost:3000 in your browser. You should see the message \"Hello World!\".\n","language":"bash","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"Copy code\nnode app.js\nVisit http://localhost:3000 in your browser. You should see the message \"Hello World!\".\n"}]}]},{"type":"element","tag":"h2","props":{"id":"step-5-building-a-simple-api"},"children":[{"type":"text","value":"Step 5: Building a Simple API"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, let's expand our server to act as a simple API. For example, let's create an endpoint that returns a list of users."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Add the following code to your app.js:"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"const users = [{ name: 'Alice' }, { name: 'Bob' }]\n\napp.get('/users', (req, res) => {\n  res.json(users)\n})\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const users = [{ name: 'Alice' }, { name: 'Bob' }]\n\napp.get('/users', (req, res) => {\n  res.json(users)\n})\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Now, if you visit "},{"type":"element","tag":"a","props":{"href":"http://localhost:3000/users","rel":["nofollow"]},"children":[{"type":"text","value":"http://localhost:3000/users"}]},{"type":"text","value":", you will see the JSON representation of the users array."}]},{"type":"element","tag":"h2","props":{"id":"step-6-testing-your-api"},"children":[{"type":"text","value":"Step 6: Testing Your API"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It’s important to test your API. You can use tools like Postman or curl to test your endpoints."}]},{"type":"element","tag":"h2","props":{"id":"step-7-next-steps"},"children":[{"type":"text","value":"Step 7: Next Steps"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"From here, you can start building more complex APIs. Consider the following:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Implementing CRUD (Create, Read, Update, Delete) operations.\nConnecting your API to a database.\nAdding authentication and authorization.\nOrganizing your code with routers and controllers."}]},{"type":"element","tag":"h2","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Express.js simplifies the process of building APIs in Node.js. It's a great starting point for developers looking to delve into backend development. With its minimalist approach, you have the freedom to structure your applications as you see fit, making Express.js an invaluable tool in your development toolkit."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"what-is-expressjs","depth":2,"text":"What is Express.js?"},{"id":"step-1-setting-up-your-environment","depth":2,"text":"Step 1: Setting Up Your Environment"},{"id":"step-2-installing-expressjs","depth":2,"text":"Step 2: Installing Express.js"},{"id":"step-3-creating-your-first-express-server","depth":2,"text":"Step 3: Creating Your First Express Server"},{"id":"step-4-running-your-express-server","depth":2,"text":"Step 4: Running Your Express Server"},{"id":"step-5-building-a-simple-api","depth":2,"text":"Step 5: Building a Simple API"},{"id":"step-6-testing-your-api","depth":2,"text":"Step 6: Testing Your API"},{"id":"step-7-next-steps","depth":2,"text":"Step 7: Next Steps"},{"id":"conclusion","depth":2,"text":"Conclusion"}]}},"_type":"markdown","_id":"content:1.writings:building-your-first-api-with-expressjs-a-beginners-guide.md","_source":"content","_file":"1.writings/building-your-first-api-with-expressjs-a-beginners-guide.md","_stem":"1.writings/building-your-first-api-with-expressjs-a-beginners-guide","_extension":"md"},{"_path":"/writings/how-to-convert-a-svg-to-png-using-canvas","_dir":"writings","_draft":false,"_partial":false,"_locale":"","title":"How to convert a SVG to PNG using Canvas","description":"A simple way to convert a SVG to PNG using Canvas","published":"2024/03/21","body":{"type":"root","children":[{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This article was created using ChatGPT and meant as a placeholder"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Converting an SVG to a PNG in JavaScript using a canvas element is a handy technique for web developers who need to manipulate vector graphics for various applications. This process essentially involves rendering an SVG image onto a canvas and then converting the canvas to a PNG format. Here's a step-by-step guide on how to achieve this:"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Prepare the SVG\nEnsure your SVG code is ready. You can use an SVG file or an SVG string embedded directly in your JavaScript code. If you're using an external SVG file, you'll need to load it into your application."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Create a Canvas Element\nYou need a canvas element to draw your SVG onto. This can be an existing canvas in your HTML or one created dynamically using JavaScript:"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const canvas = document.createElement('canvas')\ncanvas.width = 500 // Set the canvas width\ncanvas.height = 500 // Set the canvas height\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const canvas = document.createElement('canvas')\ncanvas.width = 500 // Set the canvas width\ncanvas.height = 500 // Set the canvas height\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Set the width and height of the canvas to match the desired dimensions of your final PNG."}]},{"type":"element","tag":"ol","props":{"start":3},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Draw the SVG onto the Canvas\nTo draw the SVG onto the canvas, you need to convert the SVG into an image and then draw that image on the canvas. This can be done using the Image object in JavaScript:"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const img = new Image()\nimg.onload = function () {\n  const ctx = canvas.getContext('2d')\n  ctx.drawImage(img, 0, 0)\n}\nimg.src = `data:image/svg+xml;base64,${btoa(svgString)}`\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const img = new Image()\nimg.onload = function () {\n  const ctx = canvas.getContext('2d')\n  ctx.drawImage(img, 0, 0)\n}\nimg.src = `data:image/svg+xml;base64,${btoa(svgString)}`\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In this code, replace svgString with your SVG code. If you're using an external SVG file, ensure the file is read and converted into a base64 string."}]},{"type":"element","tag":"ol","props":{"start":4},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Convert Canvas to PNG\nOnce your SVG is rendered on the canvas, you can convert the canvas to a PNG image:"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const pngUrl = canvas.toDataURL('image/png')\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const pngUrl = canvas.toDataURL('image/png')\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This pngUrl is a base64 encoded string representing your PNG image."}]},{"type":"element","tag":"ol","props":{"start":5},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Use or Save the PNG Image\nNow that you have your PNG in base64 format, you can use it as needed in your application. For example, you can display it in an element or download it:"}]}]},{"type":"element","tag":"pre","props":{"className":["language-js"],"code":"const imgElement = document.createElement('img')\nimgElement.src = pngUrl\ndocument.body.appendChild(imgElement)\n\n// To download the image\nconst downloadLink = document.createElement('a')\ndownloadLink.href = pngUrl\ndownloadLink.download = 'image.png'\ndownloadLink.click()\n","language":"js","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const imgElement = document.createElement('img')\nimgElement.src = pngUrl\ndocument.body.appendChild(imgElement)\n\n// To download the image\nconst downloadLink = document.createElement('a')\ndownloadLink.href = pngUrl\ndownloadLink.download = 'image.png'\ndownloadLink.click()\n"}]}]},{"type":"element","tag":"h3","props":{"id":"additional-considerations"},"children":[{"type":"text","value":"Additional Considerations"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Cross-Origin Issues: If you're loading an SVG from an external source, you may encounter cross-origin issues. Ensure CORS policies are configured correctly on the server hosting the SVG file.\nSVG Features: Some SVG features may not render correctly on canvas, so test your SVGs thoroughly.\nPerformance: For large SVG files, consider the performance implications of this conversion process."}]},{"type":"element","tag":"h3","props":{"id":"conclusion"},"children":[{"type":"text","value":"Conclusion"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Converting SVG to PNG using JavaScript and canvas is a powerful technique that can be integrated into web applications for dynamic image manipulation. By following these steps, developers can effectively translate the versatility of SVGs into the wide compatibility of PNGs."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"additional-considerations","depth":3,"text":"Additional Considerations"},{"id":"conclusion","depth":3,"text":"Conclusion"}]}},"_type":"markdown","_id":"content:1.writings:how-to-convert-a-svg-to-png-using-canvas.md","_source":"content","_file":"1.writings/how-to-convert-a-svg-to-png-using-canvas.md","_stem":"1.writings/how-to-convert-a-svg-to-png-using-canvas","_extension":"md"},{"_path":"/writings/modern-css-techniques","_dir":"writings","_draft":false,"_partial":false,"_locale":"","title":"现代CSS技术:构建响应式和高效的Web设计","description":"探索最新的CSS技术和方法,提升你的Web设计和开发技能","published":"2024/03/20","tags":["CSS","Web设计","响应式设计","前端开发"],"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"现代css技术构建响应式和高效的web设计"},"children":[{"type":"text","value":"现代CSS技术:构建响应式和高效的Web设计"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CSS(层叠样式表)作为Web设计的核心技术之一,一直在不断发展和创新。近年来,CSS引入了许多强大的新特性,使得创建响应式、高效且美观的Web设计变得更加容易。本文将探讨一些现代CSS技术,这些技术正在改变我们构建Web界面的方式。"}]},{"type":"element","tag":"h2","props":{"id":"css-grid革命性的布局系统"},"children":[{"type":"text","value":"CSS Grid:革命性的布局系统"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"CSS Grid是一个二维布局系统,它彻底改变了我们创建复杂布局的方式。与传统的浮动和定位方法相比,Grid提供了更直观、更灵活的布局控制。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"css-grid革命性的布局系统","depth":2,"text":"CSS Grid:革命性的布局系统"}]}},"_type":"markdown","_id":"content:1.writings:modern-css-techniques.md","_source":"content","_file":"1.writings/modern-css-techniques.md","_stem":"1.writings/modern-css-techniques","_extension":"md"},{"_path":"/writings/nuxt3-features","_dir":"writings","_draft":false,"_partial":false,"_locale":"","title":"Nuxt 3: 下一代Vue全栈框架","description":"探索Nuxt 3的新特性和改进,了解它如何革新Vue全栈开发","published":"2024/03/19","tags":["Nuxt","Vue","全栈开发","JavaScript"],"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"nuxt-3-下一代vue全栈框架"},"children":[{"type":"text","value":"Nuxt 3: 下一代Vue全栈框架"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3作为Vue生态系统中的重要成员,带来了许多令人兴奋的新特性和改进。这个版本不仅全面拥抱了Vue 3,还引入了一系列创新,旨在提升开发体验和应用性能。让我们深入探讨Nuxt 3的主要特性,了解它如何改变Vue全栈开发的格局。"}]},{"type":"element","tag":"h2","props":{"id":"全面拥抱vue-3"},"children":[{"type":"text","value":"全面拥抱Vue 3"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3完全基于Vue 3构建,这意味着开发者可以充分利用Vue 3的所有新特性,包括Composition API、更好的性能和更小的包体积。这为构建高效、可维护的应用提供了坚实的基础。"}]},{"type":"element","tag":"h3","props":{"id":"composition-api的优势"},"children":[{"type":"text","value":"Composition API的优势"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Composition API是Vue 3最显著的特性之一,它为代码组织和逻辑复用提供了更灵活的方式。在Nuxt 3中,你可以轻松地在页面和组件中使用Composition API:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更好的代码组织: 相关的逻辑可以组合在一起,提高代码的可读性和维护性。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更强的类型推断: TypeScript支持得到了显著改善,提供更准确的类型检查。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更容易复用: 通过组合式函数(Composables),可以更方便地在不同组件间共享逻辑。"}]}]},{"type":"element","tag":"h3","props":{"id":"性能提升"},"children":[{"type":"text","value":"性能提升"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Vue 3的虚拟DOM重写和编译时优化,为Nuxt 3应用带来了显著的性能提升:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更快的渲染速度: 得益于Vue 3的优化,页面渲染和更新速度更快。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"更小的运行时体积: Vue 3的核心库体积更小,有助于减少应用的总体积。"}]}]},{"type":"element","tag":"h2","props":{"id":"性能优化"},"children":[{"type":"text","value":"性能优化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3在性能方面做了大量工作。它采用了Vite作为开发服务器,大大提升了开发时的热重载速度。同时,Nuxt 3引入了混合渲染模式,允许在同一个应用中混合使用服务端渲染(SSR)、静态站点生成(SSG)和客户端渲染(CSR)。"}]},{"type":"element","tag":"h3","props":{"id":"vite作为开发服务器"},"children":[{"type":"text","value":"Vite作为开发服务器"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Vite的引入彻底改变了开发体验:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"极速的冷启动: 不再需要漫长的等待,项目几乎可以瞬间启动。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"快速的热模块替换(HMR): 修改代码后,变更几乎立即反映在浏览器中。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"按需编译: 只编译当前页面需要的代码,进一步提升开发速度。"}]}]},{"type":"element","tag":"h3","props":{"id":"混合渲染模式"},"children":[{"type":"text","value":"混合渲染模式"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3的混合渲染模式为开发者提供了前所未有的灵活性:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"页面级渲染控制: 可以为每个页面选择最合适的渲染模式。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"动态适应: 根据用户请求动态选择渲染模式,优化首屏加载和SEO。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"增量静态再生(ISR): 允许在运行时更新静态生成的内容,兼顾性能和实时性。"}]}]},{"type":"element","tag":"h2","props":{"id":"typescript的全面支持"},"children":[{"type":"text","value":"TypeScript的全面支持"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3从核心开始就采用TypeScript编写,为TypeScript用户提供了一流的开发体验。"}]},{"type":"element","tag":"h3","props":{"id":"零配置typescript"},"children":[{"type":"text","value":"零配置TypeScript"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"内置TypeScript支持: 无需额外配置即可使用TypeScript。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"自动类型生成: Nuxt会为你的项目自动生成类型声明文件。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"智能提示增强: 编辑器中的自动完成和类型检查更加准确和全面。"}]}]},{"type":"element","tag":"h3","props":{"id":"类型安全的api"},"children":[{"type":"text","value":"类型安全的API"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"类型安全的组合式函数: 使用"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useAsyncData"}]},{"type":"text","value":"、"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useFetch"}]},{"type":"text","value":"等函数时享受完整的类型推断。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"配置文件类型检查: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"nuxt.config.ts"}]},{"type":"text","value":"文件支持类型检查,减少配置错误。"}]}]},{"type":"element","tag":"h2","props":{"id":"目录结构简化"},"children":[{"type":"text","value":"目录结构简化"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3简化了项目的目录结构,使得项目组织更加直观和灵活。"}]},{"type":"element","tag":"h3","props":{"id":"自动导入"},"children":[{"type":"text","value":"自动导入"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"组件自动导入: 放置在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"components"}]},{"type":"text","value":"目录下的组件无需手动导入即可使用。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"组合式函数自动导入: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"composables"}]},{"type":"text","value":"目录下的函数可在整个应用中直接使用。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"工具函数自动导入: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"utils"}]},{"type":"text","value":"目录下的工具函数也可以自动导入。"}]}]},{"type":"element","tag":"h3","props":{"id":"新的目录约定"},"children":[{"type":"text","value":"新的目录约定"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"server"}]},{"type":"text","value":"目录: 用于存放服务器端相关的代码,如API路由和中间件。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"public"}]},{"type":"text","value":"目录: 存放静态资源,直接暴露给客户端。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"layouts"}]},{"type":"text","value":"目录: 定义应用的布局组件。"}]}]},{"type":"element","tag":"h2","props":{"id":"新的nuxt模块系统"},"children":[{"type":"text","value":"新的Nuxt模块系统"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3引入了全新的模块系统,使得扩展Nuxt功能变得更加简单和强大。"}]},{"type":"element","tag":"h3","props":{"id":"模块开发简化"},"children":[{"type":"text","value":"模块开发简化"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Hooks系统: 提供丰富的钩子,允许模块在Nuxt生命周期的不同阶段介入。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"类型安全: 模块开发也享受完整的TypeScript支持。"}]}]},{"type":"element","tag":"h3","props":{"id":"更强大的生态系统"},"children":[{"type":"text","value":"更强大的生态系统"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"官方模块: Nuxt团队维护了一系列高质量的官方模块,如"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@nuxt/image"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"@nuxt/content"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"社区模块: 丰富的社区模块生态,几乎可以满足所有常见需求。"}]}]},{"type":"element","tag":"h2","props":{"id":"服务器引擎-nitro"},"children":[{"type":"text","value":"服务器引擎: Nitro"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3采用了全新的服务器引擎Nitro,带来了一系列服务器端的改进。"}]},{"type":"element","tag":"h3","props":{"id":"跨平台部署"},"children":[{"type":"text","value":"跨平台部署"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"多平台支持: 可以轻松部署到Vercel、Netlify等平台,甚至是Cloudflare Workers。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"serverless友好: 优化了对serverless环境的支持,使得部署更加灵活。"}]}]},{"type":"element","tag":"h3","props":{"id":"api路由"},"children":[{"type":"text","value":"API路由"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"文件系统路由: 在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"server/api"}]},{"type":"text","value":"目录下创建文件即可定义API路由。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"中间件支持: 可以为API路由添加中间件,实现认证等功能。"}]}]},{"type":"element","tag":"h2","props":{"id":"状态管理"},"children":[{"type":"text","value":"状态管理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3提供了多种状态管理解决方案,适应不同规模和复杂度的应用需求。"}]},{"type":"element","tag":"h3","props":{"id":"内置状态管理"},"children":[{"type":"text","value":"内置状态管理"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useState"}]},{"type":"text","value":"组合式函数: 用于在组件和页面间共享响应式状态。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"持久化状态: 结合"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useCookie"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"useLocalStorage"}]},{"type":"text","value":"实现状态持久化。"}]}]},{"type":"element","tag":"h3","props":{"id":"集成外部状态管理库"},"children":[{"type":"text","value":"集成外部状态管理库"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Pinia集成: 官方推荐使用Pinia进行大规模状态管理。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vuex支持: 虽然不再推荐,但仍然支持Vuex 4。"}]}]},{"type":"element","tag":"h2","props":{"id":"seo和元标签管理"},"children":[{"type":"text","value":"SEO和元标签管理"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3提供了强大的SEO工具,帮助开发者轻松优化应用的搜索引擎表现。"}]},{"type":"element","tag":"h3","props":{"id":"usehead组合式函数"},"children":[{"type":"text","value":"useHead组合式函数"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"动态管理头部标签: 可以在组件和页面级别动态设置title、meta等标签。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"支持响应式数据: 头部标签可以根据组件状态动态更新。"}]}]},{"type":"element","tag":"h3","props":{"id":"内置seo最佳实践"},"children":[{"type":"text","value":"内置SEO最佳实践"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"自动生成规范链接: 避免重复内容问题。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"默认启用robots.txt: 控制搜索引擎爬虫行为。"}]}]},{"type":"element","tag":"h2","props":{"id":"结论"},"children":[{"type":"text","value":"结论"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt 3代表了Vue全栈开发的一个重大飞跃。通过全面拥抱Vue 3、引入Vite、改进TypeScript支持、简化开发体验等一系列创新,Nuxt 3为开发者提供了构建现代、高性能Web应用的强大工具集。无论是小型项目还是大规模应用,Nuxt 3都能提供出色的开发体验和运行时性能。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"随着Nuxt 3的不断成熟和生态系统的扩展,我们可以期待看到更多基于Nuxt 3的创新应用和解决方案。对于Vue开发者来说,现在正是深入学习和采用Nuxt 3的最佳时机,以充分利用这个强大框架带来的所有优势。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"全面拥抱vue-3","depth":2,"text":"全面拥抱Vue 3","children":[{"id":"composition-api的优势","depth":3,"text":"Composition API的优势"},{"id":"性能提升","depth":3,"text":"性能提升"}]},{"id":"性能优化","depth":2,"text":"性能优化","children":[{"id":"vite作为开发服务器","depth":3,"text":"Vite作为开发服务器"},{"id":"混合渲染模式","depth":3,"text":"混合渲染模式"}]},{"id":"typescript的全面支持","depth":2,"text":"TypeScript的全面支持","children":[{"id":"零配置typescript","depth":3,"text":"零配置TypeScript"},{"id":"类型安全的api","depth":3,"text":"类型安全的API"}]},{"id":"目录结构简化","depth":2,"text":"目录结构简化","children":[{"id":"自动导入","depth":3,"text":"自动导入"},{"id":"新的目录约定","depth":3,"text":"新的目录约定"}]},{"id":"新的nuxt模块系统","depth":2,"text":"新的Nuxt模块系统","children":[{"id":"模块开发简化","depth":3,"text":"模块开发简化"},{"id":"更强大的生态系统","depth":3,"text":"更强大的生态系统"}]},{"id":"服务器引擎-nitro","depth":2,"text":"服务器引擎: Nitro","children":[{"id":"跨平台部署","depth":3,"text":"跨平台部署"},{"id":"api路由","depth":3,"text":"API路由"}]},{"id":"状态管理","depth":2,"text":"状态管理","children":[{"id":"内置状态管理","depth":3,"text":"内置状态管理"},{"id":"集成外部状态管理库","depth":3,"text":"集成外部状态管理库"}]},{"id":"seo和元标签管理","depth":2,"text":"SEO和元标签管理","children":[{"id":"usehead组合式函数","depth":3,"text":"useHead组合式函数"},{"id":"内置seo最佳实践","depth":3,"text":"内置SEO最佳实践"}]},{"id":"结论","depth":2,"text":"结论"}]}},"_type":"markdown","_id":"content:1.writings:nuxt3-features.md","_source":"content","_file":"1.writings/nuxt3-features.md","_stem":"1.writings/nuxt3-features","_extension":"md"},{"_path":"/writings/vue-composition-api","_dir":"writings","_draft":false,"_partial":false,"_locale":"","title":"深入理解Vue 3 Composition API","description":"探索Vue 3 Composition API的强大功能和使用方法","published":"2024/03/18","tags":["Vue","JavaScript","前端开发","Composition API"],"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"深入理解vue-3-composition-api"},"children":[{"type":"text","value":"深入理解Vue 3 Composition API"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Vue 3的发布带来了许多激动人心的新特性,其中最引人注目的莫过于Composition API。这个新的API为我们提供了一种更灵活、更强大的方式来组织和重用组件逻辑。本文将深入探讨Composition API的核心概念、使用方法以及它如何改变我们的Vue开发体验。"}]},{"type":"element","tag":"h2","props":{"id":"什么是composition-api"},"children":[{"type":"text","value":"什么是Composition API?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Composition API是Vue 3引入的一个新的API集合,旨在解决Vue 2中Options API的一些限制。它允许我们使用导入的API函数来描述组件逻辑,而不是依赖于预定义的组件选项。这种方法提供了更好的代码组织、逻辑重用和类型推断。"}]},{"type":"element","tag":"h2","props":{"id":"为什么需要composition-api"},"children":[{"type":"text","value":"为什么需要Composition API?"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在大型复杂的应用中,Options API可能会导致组件变得难以理解和维护。相关的逻辑可能分散在不同的选项中,使得代码难以追踪和重构。Composition API通过允许我们按照逻辑关系组织代码,解决了这个问题。"}]},{"type":"element","tag":"h2","props":{"id":"setup函数composition-api的入口"},"children":[{"type":"text","value":"setup函数:Composition API的入口"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"setup"}]},{"type":"text","value":"函数是Composition API的核心。它在组件创建之前执行,作为组合逻辑的入口点。在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"setup"}]},{"type":"text","value":"中,我们可以定义响应式状态、计算属性、方法等,并将它们返回以供模板使用。"}]},{"type":"element","tag":"h3","props":{"id":"setup函数的基本结构"},"children":[{"type":"text","value":"setup函数的基本结构"}]},{"type":"element","tag":"pre","props":{"className":["language-vue"],"code":"<template>\n  <div>\n    <p>Count: {{ count }}</p>\n    <p>Double Count: {{ doubleCount }}</p>\n    <button @click=\"increment\">\n      Increment\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref } from 'vue'\n// 响应式状态\nconst count = ref(0)\n// 计算属性\nconst doubleCount = computed(() => count.value, 2)\n// 方法\nconst increment = () => {\n  count.value++\n}\n// 生命周期钩子\nonMounted(() => {\n  console.log('组件已挂载')\n})\n</script>\n","language":"vue","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <div>\n    <p>Count: {{ count }}</p>\n    <p>Double Count: {{ doubleCount }}</p>\n    <button @click=\"increment\">\n      Increment\n    </button>\n  </div>\n</template>\n\n<script setup>\nimport { computed, onMounted, ref } from 'vue'\n// 响应式状态\nconst count = ref(0)\n// 计算属性\nconst doubleCount = computed(() => count.value, 2)\n// 方法\nconst increment = () => {\n  count.value++\n}\n// 生命周期钩子\nonMounted(() => {\n  console.log('组件已挂载')\n})\n</script>\n"}]}]},{"type":"element","tag":"h2","props":{"id":"响应式系统的核心ref和reactive"},"children":[{"type":"text","value":"响应式系统的核心:ref和reactive"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Composition API引入了两个主要的响应式API:"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ref"}]},{"type":"text","value":"和"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reactive"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"h3","props":{"id":"ref"},"children":[{"type":"text","value":"ref"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"ref"}]},{"type":"text","value":"用于创建一个响应式的引用,可以包含任何类型的值"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"import { ref } from 'vue'\nconst count = ref(0)\nconsole.log(count.value) // 0\ncount.value++\nconsole.log(count.value) // 1\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { ref } from 'vue'\nconst count = ref(0)\nconsole.log(count.value) // 0\ncount.value++\nconsole.log(count.value) // 1\n"}]}]},{"type":"element","tag":"h3","props":{"id":"reactive"},"children":[{"type":"text","value":"reactive"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"reactive"}]},{"type":"text","value":"用于创建一个响应式对象,可以包含多个属性"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"import { reactive } from 'vue'\nconst state = reactive({ count: 0 })\nconsole.log(state.count) // 0\nstate.count++\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { reactive } from 'vue'\nconst state = reactive({ count: 0 })\nconsole.log(state.count) // 0\nstate.count++\n"}]}]},{"type":"element","tag":"h2","props":{"id":"计算属性和监听器"},"children":[{"type":"text","value":"计算属性和监听器"}]},{"type":"element","tag":"h3","props":{"id":"计算属性"},"children":[{"type":"text","value":"计算属性"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"计算属性是根据其他响应式状态计算得出的值。它们在模板中使用,但不会在响应式数据流中引入新的响应式状态。"}]},{"type":"element","tag":"pre","props":{"className":["language-javascript"],"code":"import { computed, ref } from 'vue'\nconst count = ref(0)\nconst doubleCount = computed(() => count.value, 2)\nconsole.log(doubleCount.value) // 0\ncount.value++\nconsole.log(doubleCount.value) // 2\n","language":"javascript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { computed, ref } from 'vue'\nconst count = ref(0)\nconst doubleCount = computed(() => count.value, 2)\nconsole.log(doubleCount.value) // 0\ncount.value++\nconsole.log(doubleCount.value) // 2\n"}]}]},{"type":"element","tag":"h3","props":{"id":"监听器"},"children":[{"type":"text","value":"监听器"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"监听器用于监听响应式状态的变化,并在变化时执行某些操作。"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"什么是composition-api","depth":2,"text":"什么是Composition API?"},{"id":"为什么需要composition-api","depth":2,"text":"为什么需要Composition API?"},{"id":"setup函数composition-api的入口","depth":2,"text":"setup函数:Composition API的入口","children":[{"id":"setup函数的基本结构","depth":3,"text":"setup函数的基本结构"}]},{"id":"响应式系统的核心ref和reactive","depth":2,"text":"响应式系统的核心:ref和reactive","children":[{"id":"ref","depth":3,"text":"ref"},{"id":"reactive","depth":3,"text":"reactive"}]},{"id":"计算属性和监听器","depth":2,"text":"计算属性和监听器","children":[{"id":"计算属性","depth":3,"text":"计算属性"},{"id":"监听器","depth":3,"text":"监听器"}]}]}},"_type":"markdown","_id":"content:1.writings:vue-composition-api.md","_source":"content","_file":"1.writings/vue-composition-api.md","_stem":"1.writings/vue-composition-api","_extension":"md"}],"navigation":[{"title":"Writings","_path":"/writings","children":[{"title":"Building Your First API with Express.js: A Beginner's Guide","_path":"/writings/building-your-first-api-with-expressjs-a-beginners-guide"},{"title":"How to convert a SVG to PNG using Canvas","_path":"/writings/how-to-convert-a-svg-to-png-using-canvas"},{"title":"现代CSS技术:构建响应式和高效的Web设计","_path":"/writings/modern-css-techniques"},{"title":"Nuxt 3: 下一代Vue全栈框架","_path":"/writings/nuxt3-features"},{"title":"深入理解Vue 3 Composition API","_path":"/writings/vue-composition-api"}]}]}